name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: {}

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (root + backend)
        run: |
          npm ci
          npm --prefix backend ci

      - name: Run frontend unit tests
        run: npm test

      - name: Run backend unit tests
        run: |
          cd backend
          npm test
        env:
          REDIS_DISABLED: 'true' # Se quiser Redis real aqui, remova isso e adicione services.

  api-smoke:
    needs: unit
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: movemarias_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -h localhost -p 5432 -U postgres -d movemarias_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend deps
        run: |
          cd backend
          npm ci

      - name: Bootstrap migration compat tables
        run: |
          cd backend
          node - <<'NODE'
          const { Client } = require('pg');
          const client = new Client({
            host: process.env.POSTGRES_HOST || 'localhost',
            port: parseInt(process.env.POSTGRES_PORT || '5432', 10),
            database: process.env.POSTGRES_DB || 'movemarias_test',
            user: process.env.POSTGRES_USER || 'postgres',
            password: process.env.POSTGRES_PASSWORD || 'postgres',
            ssl: false,
          });
          (async () => {
            await client.connect();
            try {
              await client.query(`CREATE TABLE IF NOT EXISTS migrations (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL UNIQUE,
                applied_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
              );`);
              await client.query(`
                CREATE TABLE IF NOT EXISTS migration_log (id SERIAL PRIMARY KEY);
                DO $$
                BEGIN
                  IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='migration_log' AND column_name='migration_name'
                  ) THEN
                    ALTER TABLE migration_log ADD COLUMN migration_name VARCHAR(255);
                  END IF;
                  IF NOT EXISTS (
                    SELECT 1 FROM pg_indexes WHERE schemaname = 'public' AND indexname = 'uq_migration_log_migration_name'
                  ) THEN
                    CREATE UNIQUE INDEX uq_migration_log_migration_name ON migration_log (migration_name);
                  END IF;
                  IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='migration_log' AND column_name='executed_at'
                  ) THEN
                    ALTER TABLE migration_log ADD COLUMN executed_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP;
                  END IF;
                  IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='migration_log' AND column_name='description'
                  ) THEN
                    ALTER TABLE migration_log ADD COLUMN description TEXT;
                  END IF;
                END $$;
              `);
            } finally {
              await client.end();
            }
          })().catch((e) => { console.error(e); process.exit(1); });
          NODE
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: movemarias_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      - name: Build + Migrate + Start API
        run: |
          cd backend
          npm run build
          npm run migrate:node
          node scripts/seed-superadmin.js
          node scripts/create-initial-data.js
          nohup npm start &
          for i in {1..30}; do curl -sf http://localhost:3000/api/health && break || sleep 2; done
        env:
          NODE_ENV: test
          PORT: 3000
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: movemarias_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          JWT_SECRET: test_secret
          ENABLE_WS: false
          CORS_ORIGIN: http://127.0.0.1:4173
          SUPERADMIN_EMAIL: bruno@move.com
          SUPERADMIN_NAME: Bruno Administrador
          SUPERADMIN_PASSWORD: 15002031
          ADMIN_EMAIL: admin@example.com
          ADMIN_PASSWORD: admin123

      - name: Run config smoke
        run: |
          cd backend
          npm run smoke:config
        env:
          API_BASE: http://localhost:3000/api
          SUPER_EMAIL: bruno@move.com
          SUPER_PASS: 15002031

      - name: Run reports smoke
        run: |
          cd backend
          npm run smoke:reports
        env:
          API_BASE: http://localhost:3000/api
          SUPER_EMAIL: bruno@move.com
          SUPER_PASS: 15002031

  e2e:
    needs: api-smoke
    runs-on: ubuntu-latest
    continue-on-error: false
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: movemarias_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -h localhost -p 5432 -U postgres -d movemarias_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps (root + backend)
        run: |
          npm ci
          npm --prefix backend ci

      - name: Bootstrap migration compat tables
        run: |
          cd backend
          node - <<'NODE'
          const { Client } = require('pg');
          const client = new Client({
            host: process.env.POSTGRES_HOST || 'localhost',
            port: parseInt(process.env.POSTGRES_PORT || '5432', 10),
            database: process.env.POSTGRES_DB || 'movemarias_test',
            user: process.env.POSTGRES_USER || 'postgres',
            password: process.env.POSTGRES_PASSWORD || 'postgres',
            ssl: false,
          });
          (async () => {
            await client.connect();
            try {
              await client.query(`CREATE TABLE IF NOT EXISTS migrations (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL UNIQUE,
                applied_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
              );`);
              await client.query(`
                CREATE TABLE IF NOT EXISTS migration_log (id SERIAL PRIMARY KEY);
                DO $$
                BEGIN
                  IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='migration_log' AND column_name='migration_name'
                  ) THEN
                    ALTER TABLE migration_log ADD COLUMN migration_name VARCHAR(255);
                  END IF;
                  IF NOT EXISTS (
                    SELECT 1 FROM pg_indexes WHERE schemaname = 'public' AND indexname = 'uq_migration_log_migration_name'
                  ) THEN
                    CREATE UNIQUE INDEX uq_migration_log_migration_name ON migration_log (migration_name);
                  END IF;
                  IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='migration_log' AND column_name='executed_at'
                  ) THEN
                    ALTER TABLE migration_log ADD COLUMN executed_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP;
                  END IF;
                  IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name='migration_log' AND column_name='description'
                  ) THEN
                    ALTER TABLE migration_log ADD COLUMN description TEXT;
                  END IF;
                END $$;
              `);
            } finally {
              await client.end();
            }
          })().catch((e) => { console.error(e); process.exit(1); });
          NODE
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: movemarias_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      - name: Build + Migrate + Start API
        run: |
          cd backend
          npm run build
          npm run migrate:node
          node scripts/seed-superadmin.js
          node scripts/create-initial-data.js
          nohup npm start &
          for i in {1..30}; do curl -sf http://localhost:3000/api/health && break || sleep 2; done
        env:
          NODE_ENV: test
          PORT: 3000
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: movemarias_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          JWT_SECRET: test_secret
          ENABLE_WS: true
          # ATENÇÃO: CORS pro front do E2E (4173)
          CORS_ORIGIN: http://127.0.0.1:4173
          SUPERADMIN_EMAIL: bruno@move.com
          SUPERADMIN_PASSWORD: 15002031
          ADMIN_EMAIL: admin@example.com
          ADMIN_PASSWORD: admin123

      - name: Build frontend (para vite preview)
        run: |
          cat > .env.e2e << 'EOF'
          VITE_API_BASE_URL=http://127.0.0.1:3000/api
          VITE_WS_URL=ws://127.0.0.1:3000
          EOF
          npm run build -- --mode e2e
      - name: Conferir dist existe
        run: |
          ls -la dist || (echo "dist não existe! Falhou o build?" && exit 1)

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Free port 4173 if occupied
        run: (lsof -ti :4173 | xargs -r kill -9) || true

      - name: Run E2E tests (Playwright manages web server)
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:4173

      - name: Upload Playwright Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: ignore

      - name: Upload Playwright Traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/trace.zip
          if-no-files-found: ignore

  integration:
    needs: unit
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend deps
        run: |
          cd backend
          npm ci

      - name: Run integration tests (testcontainers)
        run: |
          cd backend
          RUN_INTEGRATION=1 npm run test:integration

  # Deployment é feito pelo deploy-vps.yml via SSH no servidor
