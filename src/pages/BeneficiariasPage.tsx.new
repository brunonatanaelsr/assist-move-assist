import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { 
  useBeneficiarias, 
  useCreateBeneficiaria,
  useDeleteBeneficiaria
} from '../hooks/useBeneficiarias';
import { beneficiariaSchema } from '../validation/zodSchemas';
import { toast } from 'sonner';
import { Button } from './ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from './ui/card';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from './ui/form';
import { Input } from './ui/input';
import { Select } from './ui/select';
import { Loading } from './ui/loading';
import type { z } from 'zod';

const statusOptions = [
  { value: 'ativa', label: 'Ativa' },
  { value: 'inativa', label: 'Inativa' },
  { value: 'pendente', label: 'Pendente' },
  { value: 'desligada', label: 'Desligada' }
];

const escolaridadeOptions = [
  { value: 'fundamental_incompleto', label: 'Fundamental Incompleto' },
  { value: 'fundamental_completo', label: 'Fundamental Completo' },
  { value: 'medio_incompleto', label: 'Médio Incompleto' },
  { value: 'medio_completo', label: 'Médio Completo' },
  { value: 'superior_incompleto', label: 'Superior Incompleto' },
  { value: 'superior_completo', label: 'Superior Completo' },
  { value: 'pos_graduacao', label: 'Pós-graduação' }
];

type Beneficiaria = z.infer<typeof beneficiariaSchema>;

export function BeneficiariasPage() {
  const [page, setPage] = useState(1);
  const [search, setSearch] = useState('');
  const [status, setStatus] = useState<string | undefined>();
  const [escolaridade, setEscolaridade] = useState<string | undefined>();
  
  const { data, isLoading } = useBeneficiarias({
    page,
    limit: 10,
    search,
    status,
    escolaridade
  });
  
  const createBeneficiaria = useCreateBeneficiaria();
  const deleteBeneficiaria = useDeleteBeneficiaria();

  const form = useForm<Beneficiaria>({
    resolver: zodResolver(beneficiariaSchema),
    defaultValues: {
      status: 'pendente'
    }
  });

  const onSubmit = (data: Beneficiaria) => {
    createBeneficiaria.mutate(data, {
      onSuccess: () => {
        form.reset();
        toast.success('Beneficiária cadastrada com sucesso!');
      },
      onError: () => {
        toast.error('Erro ao cadastrar beneficiária');
      }
    });
  };

  const handleDelete = (id: string) => {
    deleteBeneficiaria.mutate(id, {
      onSuccess: () => {
        toast.success('Beneficiária removida com sucesso!');
      },
      onError: () => {
        toast.error('Erro ao remover beneficiária');
      }
    });
  };

  if (isLoading) {
    return <Loading message="Carregando beneficiárias..." />;
  }

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Beneficiárias</h1>
        <Button
          onClick={() => form.reset()}
          variant="outline"
        >
          Nova Beneficiária
        </Button>
      </div>

      {/* Filtros */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Filtros</CardTitle>
          <CardDescription>Filtre por nome, status ou escolaridade</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <FormItem>
              <FormLabel>Buscar</FormLabel>
              <Input
                placeholder="Nome, CPF ou email"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
              />
            </FormItem>
            <FormItem>
              <FormLabel>Status</FormLabel>
              <Select
                value={status}
                onValueChange={setStatus}
                options={statusOptions}
                placeholder="Selecione um status"
              />
            </FormItem>
            <FormItem>
              <FormLabel>Escolaridade</FormLabel>
              <Select
                value={escolaridade}
                onValueChange={setEscolaridade}
                options={escolaridadeOptions}
                placeholder="Selecione a escolaridade"
              />
            </FormItem>
          </div>
        </CardContent>
      </Card>

      {/* Formulário */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Nova Beneficiária</CardTitle>
          <CardDescription>Preencha os dados da beneficiária</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="nome_completo"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nome Completo</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="cpf"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>CPF</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="data_nascimento"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Data de Nascimento</FormLabel>
                      <FormControl>
                        <Input type="date" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="telefone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Telefone</FormLabel>
                      <FormControl>
                        <Input type="tel" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="escolaridade"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Escolaridade</FormLabel>
                      <FormControl>
                        <Select
                          value={field.value}
                          onValueChange={field.onChange}
                          options={escolaridadeOptions}
                          placeholder="Selecione a escolaridade"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status</FormLabel>
                      <FormControl>
                        <Select
                          value={field.value}
                          onValueChange={field.onChange}
                          options={statusOptions}
                          placeholder="Selecione o status"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <Button type="submit" className="mt-4">
                Cadastrar
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      {/* Listagem */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {data?.data?.map((beneficiaria) => (
          <Card key={beneficiaria.id}>
            <CardHeader>
              <CardTitle>{beneficiaria.nome_completo}</CardTitle>
              <CardDescription>CPF: {beneficiaria.cpf}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>Status:</span>
                  <span className="font-medium">{beneficiaria.status}</span>
                </div>
                {beneficiaria.telefone && (
                  <div className="flex justify-between">
                    <span>Telefone:</span>
                    <span className="font-medium">{beneficiaria.telefone}</span>
                  </div>
                )}
                {beneficiaria.escolaridade && (
                  <div className="flex justify-between">
                    <span>Escolaridade:</span>
                    <span className="font-medium">{beneficiaria.escolaridade}</span>
                  </div>
                )}
              </div>
              
              <div className="mt-4 flex justify-end space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => toast.info('Em desenvolvimento')}
                >
                  Editar
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => handleDelete(beneficiaria.id)}
                >
                  Excluir
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Paginação */}
      <div className="mt-6 flex justify-center gap-2">
        <Button
          variant="outline"
          onClick={() => setPage(p => Math.max(1, p - 1))}
          disabled={page === 1}
        >
          Anterior
        </Button>
        <Button
          variant="outline"
          onClick={() => setPage(p => p + 1)}
          disabled={!data?.data?.length}
        >
          Próxima
        </Button>
      </div>
    </div>
  );
}
