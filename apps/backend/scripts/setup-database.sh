#!/bin/bash

# Script de migra√ß√£o do PostgreSQL utilizando as migra√ß√µes consolidadas em src/database

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
MIGRATIONS_DIR="$PROJECT_ROOT/src/database/migrations"

# Carrega vari√°veis do .env se existir
if [ -f "$PROJECT_ROOT/.env" ]; then
  set -a
  # shellcheck disable=SC1090
  source "$PROJECT_ROOT/.env"
  set +a
fi

DB_NAME="${POSTGRES_DB:-assist_move_assist}"
DB_USER="${POSTGRES_USER:-postgres}"
DB_HOST="${POSTGRES_HOST:-localhost}"
DB_PORT="${POSTGRES_PORT:-5432}"

echo "üöÄ Iniciando prepara√ß√£o do PostgreSQL..."

# Verificar se o PostgreSQL est√° rodando
if ! pg_isready -h "$DB_HOST" -p "$DB_PORT" >/dev/null 2>&1; then
  echo "‚ùå PostgreSQL n√£o est√° respondendo em ${DB_HOST}:${DB_PORT}. Tentando iniciar servi√ßo local..."
  if command -v sudo >/dev/null 2>&1; then
    sudo service postgresql start
  else
    echo "‚ö†Ô∏è N√£o foi poss√≠vel iniciar o servi√ßo automaticamente. Certifique-se de que o banco esteja ativo."
  fi
fi

echo "üìã Configura√ß√£o:"
echo "  - Banco: $DB_NAME"
echo "  - Usu√°rio: $DB_USER"
echo "  - Host: $DB_HOST"
echo "  - Porta: $DB_PORT"
echo "  - Migra√ß√µes: $MIGRATIONS_DIR"

# Verificar se o banco existe, se n√£o, criar
echo "üîç Verificando se o banco existe..."
if ! PGPASSWORD="${POSTGRES_PASSWORD:-postgres}" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -lqt | cut -d '|' -f 1 | grep -qw "$DB_NAME"; then
  echo "üì¶ Criando banco de dados $DB_NAME..."
  PGPASSWORD="${POSTGRES_PASSWORD:-postgres}" createdb -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" "$DB_NAME"
  echo "‚úÖ Banco criado com sucesso!"
else
  echo "‚úÖ Banco $DB_NAME j√° existe."
fi

echo "üîÑ Executando migra√ß√µes consolidadas..."
if [ ! -d "$MIGRATIONS_DIR" ]; then
  echo "‚ùå Diret√≥rio de migra√ß√µes n√£o encontrado em $MIGRATIONS_DIR"
  exit 1
fi

(cd "$PROJECT_ROOT" && node "$SCRIPT_DIR/migrate-node.js")

echo "‚úÖ Migra√ß√µes aplicadas com sucesso!"
