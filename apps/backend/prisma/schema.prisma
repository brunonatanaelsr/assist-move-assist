generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportType {
  DASHBOARD
  PROJECT
  FORM
  REGIONAL
}

enum ChartType {
  LINE
  BAR
  PIE
  DOUGHNUT
}

enum ReportScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum EventType {
  OFICINA
  REUNIAO
  ATIVIDADE
  OUTRO
}

enum EventStatus {
  AGENDADO
  CONFIRMADO
  CANCELADO
  CONCLUIDO
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum ParticipantResponse {
  ACCEPTED
  DECLINED
  TENTATIVE
  PENDING
}

enum NotificationType {
  EMAIL
  PUSH
  SMS
}

model Usuario {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  senha_hash       String
  nome             String
  papel            String    @default("user")
  ativo            Boolean   @default(true)
  avatar_url       String?
  ultimo_login     DateTime?
  cargo            String?
  departamento     String?
  bio              String?
  telefone         String?
  data_criacao     DateTime  @default(now())
  data_atualizacao DateTime  @updatedAt

  beneficiarias              Beneficiaria[]          @relation("BeneficiariaResponsavel")
  oficinas                   Oficina[]               @relation("OficinaResponsavel")
  planosCriados              PlanoAcao[]             @relation("PlanoCriadoPor")
  formularios                Formulario[]            @relation("FormularioUsuario")
  historicoAtendimentos      HistoricoAtendimento[]  @relation("HistoricoUsuario")
  calendarioEventos          CalendarEvent[]         @relation("OrganizedEvents")
  participacoesCalendario    EventParticipant[]
  notificacoes               Notification[]
  preferencias               NotificationPreference?
  projetosResponsavel        Projeto[]               @relation("ProjetoResponsavel")
  reportTemplatesCriados     ReportTemplate[]        @relation("CreatedReportTemplates")
  reportTemplatesAtualizados ReportTemplate[]        @relation("UpdatedReportTemplates")
  reportExecutionsCriadas    ReportExecution[]       @relation("ReportExecutionsCreated")

  @@map("usuarios")
}

model Beneficiaria {
  id                          Int       @id @default(autoincrement())
  codigo                      String    @unique
  nome_completo               String
  cpf                         String    @unique
  rg                          String?
  rg_orgao_emissor            String?
  rg_data_emissao             DateTime? @db.Date
  nis                         String?
  data_nascimento             DateTime  @db.Date
  telefone                    String?
  telefone_secundario         String?
  email                       String?
  endereco                    String?
  bairro                      String?
  cidade                      String?
  estado                      String?
  cep                         String?
  referencia_endereco         String?
  escolaridade                String?
  estado_civil                String?
  num_dependentes             Int?      @default(0)
  renda_familiar              Decimal?  @db.Decimal(10, 2)
  situacao_moradia            String?
  observacoes_socioeconomicas String?
  status                      String    @default("ativa")
  observacoes                 String?
  historico_violencia         String?
  tipo_violencia              String[]  @default([]) @db.Text
  medida_protetiva            Boolean?  @default(false)
  acompanhamento_juridico     Boolean?  @default(false)
  acompanhamento_psicologico  Boolean?  @default(false)
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @updatedAt
  deleted_at                  DateTime?
  usuario_id                  Int?

  responsavel           Usuario?                      @relation("BeneficiariaResponsavel", fields: [usuario_id], references: [id], onDelete: SetNull)
  familiares            BeneficiariaFamiliar[]
  vulnerabilidades      BeneficiariaVulnerabilidade[]
  participacoes         Participacao[]
  participacaoOficinas  ParticipacaoOficina[]
  formularios           Formulario[]
  historicoAtendimentos HistoricoAtendimento[]
  planos                PlanoAcao[]
  statusHistorico       HistoricoStatusBeneficiaria[]
  presencas             OficinaPresenca[]

  @@index([status])
  @@map("beneficiarias")
}

model BeneficiariaFamiliar {
  id              Int       @id @default(autoincrement())
  beneficiaria_id Int
  nome            String
  parentesco      String?
  data_nascimento DateTime? @db.Date
  trabalha        Boolean?
  renda_mensal    Decimal?  @db.Decimal(10, 2)
  observacoes     String?
  created_at      DateTime  @default(now())

  beneficiaria Beneficiaria @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)

  @@index([beneficiaria_id])
  @@map("beneficiaria_familiares")
}

model Vulnerabilidade {
  id        Int    @id @default(autoincrement())
  slug      String @unique
  descricao String

  beneficiarias BeneficiariaVulnerabilidade[]

  @@map("vulnerabilidades")
}

model BeneficiariaVulnerabilidade {
  beneficiaria_id    Int
  vulnerabilidade_id Int
  apontada_em        DateTime? @db.Date

  beneficiaria    Beneficiaria    @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)
  vulnerabilidade Vulnerabilidade @relation(fields: [vulnerabilidade_id], references: [id], onDelete: Cascade)

  @@id([beneficiaria_id, vulnerabilidade_id])
  @@index([vulnerabilidade_id])
  @@map("beneficiaria_vulnerabilidades")
}

model Projeto {
  id                Int       @id @default(autoincrement())
  nome              String
  descricao         String?
  data_inicio       DateTime? @db.Date
  data_fim_prevista DateTime? @db.Date
  status            String    @default("planejamento")
  responsavel_id    Int?
  orcamento         Decimal?  @db.Decimal(12, 2)
  local_execucao    String?
  ativo             Boolean   @default(true)
  data_criacao      DateTime  @default(now())
  data_atualizacao  DateTime  @updatedAt

  responsavel    Usuario?        @relation("ProjetoResponsavel", fields: [responsavel_id], references: [id], onDelete: SetNull)
  participacoes  Participacao[]
  oficinas       Oficina[]
  calendarEvents CalendarEvent[]

  @@index([status])
  @@map("projetos")
}

model Participacao {
  id              Int      @id @default(autoincrement())
  projeto_id      Int
  beneficiaria_id Int
  status          String   @default("inscrita")
  ativo           Boolean  @default(true)
  data_inscricao  DateTime @default(now())

  projeto      Projeto      @relation(fields: [projeto_id], references: [id], onDelete: Cascade)
  beneficiaria Beneficiaria @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)

  @@index([projeto_id])
  @@index([beneficiaria_id])
  @@map("participacoes")
}

model Oficina {
  id               Int       @id @default(autoincrement())
  nome             String
  descricao        String?
  instrutor        String?
  data_inicio      DateTime  @db.Date
  data_fim         DateTime? @db.Date
  horario_inicio   DateTime? @db.Time
  horario_fim      DateTime? @db.Time
  local            String?
  tipo             String?
  vagas_total      Int       @default(0)
  projeto_id       Int?
  responsavel_id   Int?
  status           String    @default("ativa")
  ativo            Boolean   @default(true)
  data_criacao     DateTime  @default(now())
  data_atualizacao DateTime  @updatedAt
  deleted_at       DateTime?

  projeto       Projeto?              @relation(fields: [projeto_id], references: [id], onDelete: SetNull)
  responsavel   Usuario?              @relation("OficinaResponsavel", fields: [responsavel_id], references: [id], onDelete: SetNull)
  participacoes ParticipacaoOficina[]
  presencas     OficinaPresenca[]

  @@index([status])
  @@index([data_inicio, data_fim])
  @@map("oficinas")
}

model ParticipacaoOficina {
  id                  Int       @id @default(autoincrement())
  oficina_id          Int
  beneficiaria_id     Int
  status              String    @default("inscrita")
  data_inscricao      DateTime  @default(now())
  data_conclusao      DateTime?
  frequencia          Int       @default(0)
  avaliacao           Int?
  feedback            String?
  certificado_emitido Boolean   @default(false)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?

  oficina      Oficina      @relation(fields: [oficina_id], references: [id], onDelete: Cascade)
  beneficiaria Beneficiaria @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)

  @@unique([oficina_id, beneficiaria_id])
  @@index([beneficiaria_id])
  @@map("participacao_oficinas")
}

model OficinaPresenca {
  id              Int       @id @default(autoincrement())
  oficina_id      Int
  beneficiaria_id Int
  presente        Boolean   @default(false)
  observacoes     String?
  data_registro   DateTime? @default(now())
  data_encontro   DateTime  @db.Date

  oficina      Oficina      @relation(fields: [oficina_id], references: [id], onDelete: Cascade)
  beneficiaria Beneficiaria @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)

  @@unique([oficina_id, beneficiaria_id, data_encontro])
  @@index([beneficiaria_id])
  @@index([data_encontro])
  @@map("oficina_presencas")
}

model Formulario {
  id                 Int       @id @default(autoincrement())
  tipo               String
  beneficiaria_id    Int
  data_preenchimento DateTime? @default(now())
  dados              Json
  status             String    @default("rascunho")
  observacoes        String?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  usuario_id         Int?

  beneficiaria Beneficiaria @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)
  usuario      Usuario?     @relation("FormularioUsuario", fields: [usuario_id], references: [id], onDelete: SetNull)

  @@index([tipo])
  @@index([beneficiaria_id])
  @@map("formularios")
}

model HistoricoAtendimento {
  id               Int      @id @default(autoincrement())
  beneficiaria_id  Int
  tipo_atendimento String
  data_atendimento DateTime
  descricao        String
  encaminhamentos  String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  usuario_id       Int?

  beneficiaria Beneficiaria @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)
  usuario      Usuario?     @relation("HistoricoUsuario", fields: [usuario_id], references: [id], onDelete: SetNull)

  @@index([beneficiaria_id])
  @@index([data_atendimento])
  @@map("historico_atendimentos")
}

model HistoricoStatusBeneficiaria {
  id              Int      @id @default(autoincrement())
  beneficiaria_id Int
  status_anterior String?
  status_novo     String
  observacao      String?
  data_registro   DateTime @default(now())

  beneficiaria Beneficiaria @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)

  @@index([beneficiaria_id])
  @@map("historico_status_beneficiaria")
}

model PlanoAcao {
  id                      Int       @id @default(autoincrement())
  beneficiaria_id         Int
  criado_por              Int?
  criado_em               DateTime  @default(now())
  atualizado_em           DateTime  @updatedAt
  objetivo_principal      String
  areas_prioritarias      String[]  @default([]) @db.Text
  observacoes             String?
  primeira_avaliacao_em   DateTime? @db.Date
  primeira_avaliacao_nota String?
  segunda_avaliacao_em    DateTime? @db.Date
  segunda_avaliacao_nota  String?
  assinatura_beneficiaria String?
  assinatura_responsavel  String?

  beneficiaria Beneficiaria    @relation(fields: [beneficiaria_id], references: [id], onDelete: Cascade)
  criador      Usuario?        @relation("PlanoCriadoPor", fields: [criado_por], references: [id], onDelete: SetNull)
  itens        PlanoAcaoItem[]

  @@index([beneficiaria_id])
  @@map("planos_acao")
}

model PlanoAcaoItem {
  id                Int       @id @default(autoincrement())
  plano_id          Int
  titulo            String
  responsavel       String?
  prazo             DateTime? @db.Date
  status            String    @default("pendente")
  suporte_oferecido String?
  criado_em         DateTime  @default(now())
  atualizado_em     DateTime  @updatedAt

  plano PlanoAcao @relation(fields: [plano_id], references: [id], onDelete: Cascade)

  @@index([plano_id])
  @@map("plano_acao_itens")
}

model ReportTemplate {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  type          ReportType
  filters       Json       @default("{}")
  metrics       String[]   @default([]) @db.Text
  charts        Json       @default("{}")
  schedule      Json?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  created_by_id Int
  updated_by_id Int

  createdBy  Usuario           @relation("CreatedReportTemplates", fields: [created_by_id], references: [id], onDelete: Restrict)
  updatedBy  Usuario           @relation("UpdatedReportTemplates", fields: [updated_by_id], references: [id], onDelete: Restrict)
  executions ReportExecution[]

  @@map("report_templates")
}

model ReportExecution {
  id             Int      @id @default(autoincrement())
  status         String
  error_message  String?
  execution_time Int?
  output_format  String
  output_url     String?
  created_at     DateTime @default(now())
  template_id    Int
  created_by_id  Int

  template  ReportTemplate @relation(fields: [template_id], references: [id], onDelete: Cascade)
  createdBy Usuario        @relation("ReportExecutionsCreated", fields: [created_by_id], references: [id], onDelete: Restrict)

  @@map("report_executions")
}

model Notification {
  id         Int       @id @default(autoincrement())
  user_id    Int
  title      String
  message    String
  type       String    @default("info")
  read       Boolean   @default(false)
  action_url String?
  data       Json      @default("{}")
  created_at DateTime  @default(now())
  read_at    DateTime?

  user Usuario @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([read])
  @@map("notifications")
}

model NotificationPreference {
  id                          Int       @id @default(autoincrement())
  user_id                     Int       @unique
  email_notifications         Boolean   @default(true)
  push_notifications          Boolean   @default(false)
  mention_notifications       Boolean   @default(true)
  assignment_notifications    Boolean   @default(true)
  activity_notifications      Boolean   @default(true)
  form_response_notifications Boolean   @default(true)
  reminder_notifications      Boolean   @default(true)
  notification_types          String[]  @default(["info", "success", "warning", "error"]) @db.Text
  quiet_hours_start           DateTime? @db.Time
  quiet_hours_end             DateTime? @db.Time

  user Usuario @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model CalendarEvent {
  id                 Int         @id @default(autoincrement())
  title              String
  description        String?
  start_date         DateTime
  end_date           DateTime
  all_day            Boolean     @default(false)
  location           String?
  type               EventType
  status             EventStatus
  project_id         Int?
  organizer_id       Int
  recurrence_rule_id Int?
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt

  organizer      Usuario                @relation("OrganizedEvents", fields: [organizer_id], references: [id], onDelete: Restrict)
  recurrenceRule RecurrenceRule?        @relation(fields: [recurrence_rule_id], references: [id], onDelete: SetNull)
  project        Projeto?               @relation(fields: [project_id], references: [id], onDelete: SetNull)
  participants   EventParticipant[]
  notifications  CalendarNotification[]

  @@index([start_date, end_date])
  @@index([type])
  @@index([status])
  @@index([project_id])
  @@index([organizer_id])
  @@map("calendar_events")
}

model RecurrenceRule {
  id         Int                 @id @default(autoincrement())
  frequency  RecurrenceFrequency
  interval   Int                 @default(1)
  until_date DateTime?
  by_weekday Int[]               @default([])
  exceptions DateTime[]          @default([])
  created_at DateTime            @default(now())
  updated_at DateTime            @updatedAt

  events CalendarEvent[]

  @@map("recurrence_rules")
}

model EventParticipant {
  id             Int                 @id @default(autoincrement())
  event_id       Int
  participant_id Int
  response       ParticipantResponse @default(PENDING)
  attended       Boolean?
  notes          String?
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt

  event       CalendarEvent @relation(fields: [event_id], references: [id], onDelete: Cascade)
  participant Usuario       @relation(fields: [participant_id], references: [id], onDelete: Restrict)

  @@unique([event_id, participant_id])
  @@index([participant_id])
  @@map("event_participants")
}

model CalendarNotification {
  id             Int              @id @default(autoincrement())
  event_id       Int
  type           NotificationType
  minutes_before Int
  sent           Boolean          @default(false)
  scheduled_for  DateTime?
  sent_at        DateTime?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt

  event CalendarEvent @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id])
  @@index([sent])
  @@map("calendar_notifications")
}

model FeedPost {
  id               Int      @id @default(autoincrement())
  tipo             String   @default("noticia")
  titulo           String
  conteudo         String
  imagem_url       String?
  autor_id         String?
  autor_nome       String?
  curtidas         Int      @default(0)
  comentarios      Int      @default(0)
  ativo            Boolean  @default(true)
  data_criacao     DateTime @default(now())
  data_atualizacao DateTime @updatedAt

  comentariosFeed ComentarioFeed[]

  @@index([ativo])
  @@map("feed_posts")
}

model ComentarioFeed {
  id               Int      @id @default(autoincrement())
  post_id          Int
  autor_id         String?
  autor_nome       String?
  autor_foto       String?
  conteudo         String
  ativo            Boolean  @default(true)
  data_criacao     DateTime @default(now())
  data_atualizacao DateTime @updatedAt

  post FeedPost @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id])
  @@map("comentarios_feed")
}
